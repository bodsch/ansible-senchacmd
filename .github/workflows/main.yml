---
name: CI

on:
  schedule:
    - cron: "0 10 * * 0"
  workflow_dispatch:
  workflow_run:
    workflows:
      - "code linter"
    branches:
      - main
      - feature/**
    types:
      - completed

defaults:
  run:
    working-directory: 'ansible-senchacmd'

env:
  PY_COLORS: '1'
  ANSIBLE_FORCE_COLOR: '1'

jobs:
  arch:
    name: "${{ matrix.image }} / ansible ${{ matrix.ansible-version }} / python ${{ matrix.python_version }}"
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'schedule' || github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        image:
          - archlinux:latest
        python_version:
          - "3.11"
          - "3.12"
        ansible-version:
          - '8.5'

    steps:
      - name: check out the codebase.
        uses: actions/checkout@v4
        with:
          path: 'ansible-senchacmd'

      - name: üêç set up python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python_version }}"

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r test-requirements.txt

      - name: force reinstall of community.docker
        run: |
          mkdir -p /home/runner/.ansible/collections
          ansible-galaxy collection install community.docker --force

      - name: test with tox
        run: |
          make \
            test \
            -e TOX_SCENARIO="${{ matrix.scenario }}" \
            -e TOX_ANSIBLE="ansible_${{ matrix.ansible-version }}" \
            -e DISTRIBUTION="${{ matrix.image }}"

  debian:
    name: "${{ matrix.image }} / ansible ${{ matrix.ansible-version }} / python ${{ matrix.python_version }}"
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'schedule' || github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        image:
          - debian:12
        python_version:
          - "3.11"
          - "3.12"
        ansible-version:
          - '8.5'

    steps:
      - name: check out the codebase.
        uses: actions/checkout@v4
        with:
          path: 'ansible-senchacmd'

      - name: üêç set up python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python_version }}"

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r test-requirements.txt

      - name: force reinstall of community.docker
        run: |
          mkdir -p /home/runner/.ansible/collections
          ansible-galaxy collection install community.docker --force

      - name: test with tox
        run: |
          make \
            test \
            -e TOX_SCENARIO="${{ matrix.scenario }}" \
            -e TOX_ANSIBLE="ansible_${{ matrix.ansible-version }}" \
            -e DISTRIBUTION="${{ matrix.image }}"

  ubuntu:
    name: "${{ matrix.image }} / ansible ${{ matrix.ansible-version }} / python ${{ matrix.python_version }}"
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'schedule' || github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        image:
          - debian:12
          - ubuntu:24.04
        python_version:
          - "3.11"
          - "3.12"
        ansible-version:
          - '8.5'

    steps:
      - name: check out the codebase.
        uses: actions/checkout@v4
        with:
          path: 'ansible-senchacmd'

      - name: üêç set up python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python_version }}"

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r test-requirements.txt

      - name: force reinstall of community.docker
        run: |
          mkdir -p /home/runner/.ansible/collections
          ansible-galaxy collection install community.docker --force

      - name: test with tox
        run: |
          make \
            test \
            -e TOX_SCENARIO="${{ matrix.scenario }}" \
            -e TOX_ANSIBLE="ansible_${{ matrix.ansible-version }}" \
            -e DISTRIBUTION="${{ matrix.image }}"

